package main

import (
	"fmt"
	"log"
	"os"
	"sync"

	"github.com/kardianos/service"
)

var onceApp sync.Once
var instanceApp *App

type App struct {
}

func (app *App) Execute() error {
	svcConfig := &service.Config{
		Name:        "GoDemoService",
		DisplayName: "Go Demo Service",
		Description: "This is a Go service demo.",
	}

	svc, err := service.New(app, svcConfig)
	if err != nil {
		log.Fatal(err)
	}

	logger, err := svc.Logger(nil)
	if err != nil {
		log.Fatal(err)
	}

	if len(os.Args) > 1 {
		verb := os.Args[1]
		switch verb {
		case "install":
			err := svc.Install()
			if err != nil {
				fmt.Printf("Erro ao instalar serviço: %v\n", err)
				return err
			}
			fmt.Println("Serviço instalado com sucesso!")
			return nil
		case "uninstall":
			err := svc.Uninstall()
			if err != nil {
				fmt.Printf("Erro ao desinstalar serviço: %v\n", err)
				return err
			}
			fmt.Println("Serviço desinstalado com sucesso!")
			return nil
		case "start":
			err := svc.Start()
			if err != nil {
				fmt.Printf("Erro ao iniciar serviço: %v\n", err)
				return err
			}
			fmt.Println("Serviço iniciado com sucesso!")
			return nil
		case "stop":
			err := svc.Stop()
			if err != nil {
				fmt.Printf("Erro ao parar serviço: %v\n", err)
				return err
			}
			fmt.Println("Serviço parado com sucesso!")
			return nil
		default:
			fmt.Printf("Comando inválido: %s\n", verb)
			fmt.Println("Comandos válidos: install, uninstall, start, stop")
			return nil
		}
	}

	// Se não há argumentos, roda como serviço normal
	logger.Info("Iniciando serviço...")
	return svc.Run()
}

func (app *App) Start(s service.Service) error {
	go app.Run()
	return nil
}
func (app *App) Stop(s service.Service) error {
	return nil
}
func (app *App) Run() error {
	CoreApi := NewCoreApi()
	go CoreApi.Start()
	return nil
}

func NewApp() *App {
	onceApp.Do(func() {
		instanceApp = &App{}
	})
	return instanceApp
}
func main() {
	NewApp().Execute()
}
